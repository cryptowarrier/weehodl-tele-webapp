[{"/home/peace/weehodl-tele-webapp/src/index.js":"1","/home/peace/weehodl-tele-webapp/src/App.js":"2","/home/peace/weehodl-tele-webapp/src/components/Wallets.js":"3","/home/peace/weehodl-tele-webapp/src/utils/ethers.util.js":"4","/home/peace/weehodl-tele-webapp/src/utils/solana.util.js":"5","/home/peace/weehodl-tele-webapp/src/utils/network.js":"6","/home/peace/weehodl-tele-webapp/src/services/api.service.js":"7","/home/peace/weehodl-tele-webapp/src/constants/index.js":"8","/home/peace/weehodl-tele-webapp/src/utils/ERC20ABI.js":"9","/home/peace/weehodl-tele-webapp/src/hooks/useTelegram.js":"10","/home/peace/weehodl-tele-webapp/src/components/ProjectList.js":"11","/home/peace/weehodl-tele-webapp/src/constants/contracts.js":"12"},{"size":428,"mtime":1684720340913,"results":"13","hashOfConfig":"14"},{"size":528,"mtime":1684828789954,"results":"15","hashOfConfig":"14"},{"size":6569,"mtime":1684821008766,"results":"16","hashOfConfig":"14"},{"size":2087,"mtime":1684830431548,"results":"17","hashOfConfig":"14"},{"size":350,"mtime":1684720340913,"results":"18","hashOfConfig":"14"},{"size":3336,"mtime":1684720340913,"results":"19","hashOfConfig":"14"},{"size":348,"mtime":1684834788929,"results":"20","hashOfConfig":"14"},{"size":783,"mtime":1684720340913,"results":"21","hashOfConfig":"14"},{"size":3930,"mtime":1684720340913,"results":"22","hashOfConfig":"14"},{"size":396,"mtime":1684761548485,"results":"23","hashOfConfig":"14"},{"size":4683,"mtime":1684835129631,"results":"24","hashOfConfig":"14"},{"size":164,"mtime":1684823927208,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1v35svd",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/peace/weehodl-tele-webapp/src/index.js",[],["53","54"],"/home/peace/weehodl-tele-webapp/src/App.js",[],"/home/peace/weehodl-tele-webapp/src/components/Wallets.js",["55","56","57"],"import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getBscBalance, getEthBalance, getTokenBalance } from \"../utils/ethers.util\";\nimport { getSolBalance } from \"../utils/solana.util\";\nimport { networks } from \"../utils/network\";\nimport { bscChainId, bscTokens, ethChainId, ethTokens, solTokens } from \"../constants\";\nimport { FaRegCopy } from 'react-icons/fa';\nimport { withdrawQuery } from \"../services/api.service\";\nimport { useTelegram } from \"../hooks/useTelegram\";\n\nconst Wallets = () => {\n  const [walletAddress, setWalletAddress] = useState('');\n  const [userBalance, setUserBalance] = useState(0);\n  const [currentNetwork, setCurrentNetwork] = useState(ethChainId);\n  const [currentToken, setCurrentToken] = useState(ethTokens[0].address);\n  const [tokenList, setTokenList] = useState(ethTokens);\n  const [showAddress, setShowAddress] = useState(false);\n  const [showWithdraw, setShowWithdraw] = useState(false);\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('0');\n\n  const [searchParams] = useSearchParams();\n\n  const { tg, onClose, onToggleButton, queryId, user } = useTelegram();\n\n  // const optimizeAddress = (addr) => {\n  //   return `${addr.substring(0, 5)}..${addr.substring(addr.length - 5)}`\n  // }\n\n\n\n  useEffect(() => {\n    tg.ready();\n    tg.onEvent('mainButtonClicked', withdraw);\n    return () => {\n      tg.offEvent('mainButtonClicked');\n    }\n  }, []);\n\n  const withdraw = async () => {\n      await withdrawQuery({\n        queryId: queryId,\n        amount: amount,\n        chain: currentNetwork,\n        recipient: recipient,\n        user: user.id,\n        token: currentToken\n      });\n  }\n\n  // get coin balance\n  useEffect(() => {\n    async function getUserBalances() {\n      if (currentNetwork === ethChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        setTokenList(ethTokens);\n        setCurrentToken(ethTokens[0].address);\n        setWalletAddress(userAddr);\n      } else if (currentNetwork === bscChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        setWalletAddress(userAddr);\n        setTokenList(bscTokens);\n        setCurrentToken(bscTokens[0].address);\n      } else {\n        const userAddr = searchParams.get('solwallet');\n        setTokenList(solTokens);\n        setCurrentToken(solTokens[0].address);\n        setWalletAddress(userAddr);\n      }\n    }\n    getUserBalances();\n  }, [currentNetwork, searchParams]);\n\n  // getTokenbalance\n  useEffect(() => {\n    async function getTokenBalances() {\n      if (currentNetwork === ethChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        if (!userAddr) return;\n        if (currentToken !== '') {\n          const balance = await getTokenBalance(ethChainId, currentToken, userAddr);\n          setUserBalance(balance);\n        } else {\n          const balance = await getEthBalance(userAddr);\n          setUserBalance(Number(balance).toFixed(4).toString() + ' ETH');\n        }\n      } else if (currentNetwork === bscChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        if (currentToken !== '') {\n          const balance = await getTokenBalance(bscChainId, currentToken, userAddr);\n          setUserBalance(balance);\n        } else {\n          const balance = await getBscBalance(userAddr);\n          setUserBalance(Number(balance).toFixed(4).toString() + ' BNB');\n        }\n      } else {\n        const userAddr = searchParams.get('solwallet');\n        const balance = await getSolBalance(userAddr);\n        setUserBalance(balance.toFixed(4).toString() + ' SOL');\n      }\n    }\n    getTokenBalances();\n  }, [currentToken, currentNetwork, searchParams]);\n\n  const openWithdraw = () => {\n    tg.MainButton.text = 'Withdraw';\n    tg.MainButton.show();\n    setShowWithdraw(true);\n    setShowAddress(false);\n  }\n\n  const openDeposit = () => {\n    setShowAddress(true);\n    setShowWithdraw(false);\n    tg.MainButton.hide();\n  }\n\n\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <label htmlFor=\"network-select\">Network</label>\n          <div id=\"network-select\" className=\"select\">\n            <select value={currentNetwork} onChange={e => setCurrentNetwork(e.target.value)} id=\"standard-select\">\n              <option value={ethChainId}>{networks[ethChainId].chainName}</option>\n              <option value={bscChainId}>{networks[bscChainId].chainName}</option>\n              <option value=\"Solana\">Solana</option>\n            </select>\n            <span className=\"focus\"></span>\n          </div>\n        </div>\n        <div style={{ marginLeft: '0.2em' }}>\n          <label htmlFor=\"token-select\">Token</label>\n          <div id=\"token-select\" className=\"select\">\n            <select value={currentToken} onChange={e => setCurrentToken(e.target.value)} id=\"standard-select\">\n              {\n                tokenList.map((token, i) => (\n                  <option key={i} value={token.address}>{token.name}</option>\n                ))\n              }\n            </select>\n            <span className=\"focus\"></span>\n          </div>\n        </div>\n      </div>\n      <div style={{ marginTop: '2em', marginLeft: '0.5em' }}>\n        {`Balance: ${userBalance} `}\n      </div>\n\n      <div style={{ marginTop: '2em', marginLeft: '0.5em' }}>\n        <div>\n          <button onClick={openDeposit}>Deposit</button>\n          <button onClick={openWithdraw}>Withdraw</button>\n        </div>\n      </div>\n\n      {\n        showAddress && (\n          <div style={{ textAlign: 'center', marginTop: '40px' }}>\n            <div>\n              <span>Your Address</span>\n              <FaRegCopy onClick={() => navigator.clipboard.writeText(walletAddress)} style={{ marginLeft: '10px', cursor: 'pointer' }} />\n            </div>\n            <div style={{ fontSize: '14px' }}>\n              {walletAddress}\n            </div>\n          </div>\n        )\n      }\n      {\n        showWithdraw && (\n          <div>\n            <div>\n              <input value={recipient} onChange={e => setRecipient(e.target.value)} type=\"text\" placeholder=\"Input Recipient Address\" />\n            </div>\n            <div>\n              <input value={amount} onChange={e => setAmount(e.target.value)} type=\"text\" placeholder=\"Input Amount\" />\n            </div>\n          </div>\n        )\n      }\n      <div>{queryId}</div>\n      <div>{user.id}</div>\n      <div>{currentNetwork}</div>\n      <div>{currentToken}</div>\n      <div>{amount}</div>\n      <div>{recipient}</div>\n    </div>\n  )\n}\n\nexport default Wallets;","/home/peace/weehodl-tele-webapp/src/utils/ethers.util.js",["58"],"import { ethers } from \"ethers\"\nimport { networks } from \"./network\"\nimport { bscChainId, ethChainId, secretKey } from \"../constants\"\nimport { formatEther, formatUnits } from \"ethers/lib/utils\";\nimport { ERC20ABI } from \"./ERC20ABI\";\nimport { contracts } from '../constants/contracts';\nimport Factory from './contracts/ProjectFactory.sol/ProjectFactory.json';\nimport Project from './contracts/Project.sol/Project.json';\n\nexport const getEthBalance = async (addr) => {\n  const provider = new ethers.providers.JsonRpcProvider(networks[ethChainId].rpcUrls[0]);\n  const balance = await provider.getBalance(addr);\n  return formatEther(balance);\n}\n\nexport const getBscBalance = async (addr) => {\n  const provider = new ethers.providers.JsonRpcProvider(networks[bscChainId].rpcUrls[0]);\n  const balance = await provider.getBalance(addr);\n  return formatEther(balance);\n}\n\nexport const getTokenBalance = async (chainId, tokenAddress, wallet) => {\n  const provider = new ethers.providers.JsonRpcProvider(networks[chainId].rpcUrls[0]);\n  const token = new ethers.Contract(tokenAddress, ERC20ABI, provider);\n  const balance = await token.balanceOf(wallet);\n  const decimals = await token.decimals();\n  const symbol = await token.symbol();\n  return formatUnits(balance, Number(decimals)) + symbol;\n}\n\nexport const getTokenDecimals = async (chainId, tokenAddress) => {\n  const provider = new ethers.providers.JsonRpcProvider(networks[chainId].rpcUrls[0]);\n  const token = new ethers.Contract(tokenAddress, ERC20ABI, provider);\n  const decimals = await token.decimals();\n  return Number(decimals);\n}\n\nexport const factory = (chainId) => {\n  const address = contracts[chainId].factory;\n  const provider = new ethers.providers.JsonRpcProvider(networks[chainId].rpcUrls[0]);\n  const contract = new ethers.Contract(address, Factory.abi, provider);\n  return contract;\n}\n\nexport const projectContract = (chainId, address) => {\n  const provider = new ethers.providers.JsonRpcProvider(networks[chainId].rpcUrls[0]);\n  const contract = new ethers.Contract(address, Project.abi, provider);\n  return contract;\n}\n","/home/peace/weehodl-tele-webapp/src/utils/solana.util.js",[],"/home/peace/weehodl-tele-webapp/src/utils/network.js",[],"/home/peace/weehodl-tele-webapp/src/services/api.service.js",[],"/home/peace/weehodl-tele-webapp/src/constants/index.js",[],"/home/peace/weehodl-tele-webapp/src/utils/ERC20ABI.js",[],"/home/peace/weehodl-tele-webapp/src/hooks/useTelegram.js",[],"/home/peace/weehodl-tele-webapp/src/components/ProjectList.js",["59","60","61","62"],"/home/peace/weehodl-tele-webapp/src/constants/contracts.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":24,"column":15,"nodeType":"69","messageId":"70","endLine":24,"endColumn":22},{"ruleId":"67","severity":1,"message":"71","line":24,"column":24,"nodeType":"69","messageId":"70","endLine":24,"endColumn":38},{"ruleId":"72","severity":1,"message":"73","line":38,"column":6,"nodeType":"74","endLine":38,"endColumn":8,"suggestions":"75"},{"ruleId":"67","severity":1,"message":"76","line":3,"column":34,"nodeType":"69","messageId":"70","endLine":3,"endColumn":43},{"ruleId":"67","severity":1,"message":"77","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":14},{"ruleId":"72","severity":1,"message":"78","line":26,"column":6,"nodeType":"74","endLine":26,"endColumn":8,"suggestions":"79"},{"ruleId":"67","severity":1,"message":"80","line":38,"column":15,"nodeType":"69","messageId":"70","endLine":38,"endColumn":28},{"ruleId":"72","severity":1,"message":"81","line":61,"column":6,"nodeType":"74","endLine":61,"endColumn":22,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'onClose' is assigned a value but never used.","Identifier","unusedVar","'onToggleButton' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'tg' and 'withdraw'. Either include them or remove the dependency array.","ArrayExpression",["85"],"'secretKey' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'invest', 'searchParams', and 'tg'. Either include them or remove the dependency array.",["86"],"'tokenDecimals' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tg.MainButton'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [tg, withdraw]",{"range":"94","text":"95"},"Update the dependencies array to be: [invest, searchParams, tg]",{"range":"96","text":"97"},"Update the dependencies array to be: [currentProject, tg.MainButton]",{"range":"98","text":"99"},[1468,1470],"[tg, withdraw]",[939,941],"[invest, searchParams, tg]",[2205,2221],"[currentProject, tg.MainButton]"]