[{"/home/peace/weehodl-tele-webapp/src/index.js":"1","/home/peace/weehodl-tele-webapp/src/App.js":"2","/home/peace/weehodl-tele-webapp/src/components/Wallets.js":"3","/home/peace/weehodl-tele-webapp/src/utils/ethers.util.js":"4","/home/peace/weehodl-tele-webapp/src/utils/solana.util.js":"5","/home/peace/weehodl-tele-webapp/src/utils/network.js":"6","/home/peace/weehodl-tele-webapp/src/services/api.service.js":"7","/home/peace/weehodl-tele-webapp/src/constants/index.js":"8","/home/peace/weehodl-tele-webapp/src/utils/ERC20ABI.js":"9","/home/peace/weehodl-tele-webapp/src/hooks/useTelegram.js":"10","/home/peace/weehodl-tele-webapp/src/components/ProjectList.js":"11","/home/peace/weehodl-tele-webapp/src/constants/contracts.js":"12","/home/peace/weehodl-tele-webapp/src/components/UserLocks.js":"13","/home/peace/weehodl-tele-webapp/src/utils/time.util.js":"14"},{"size":428,"mtime":1684720340913,"results":"15","hashOfConfig":"16"},{"size":632,"mtime":1684836960305,"results":"17","hashOfConfig":"16"},{"size":6569,"mtime":1684821008766,"results":"18","hashOfConfig":"16"},{"size":2643,"mtime":1684842777397,"results":"19","hashOfConfig":"16"},{"size":350,"mtime":1684720340913,"results":"20","hashOfConfig":"16"},{"size":3336,"mtime":1684720340913,"results":"21","hashOfConfig":"16"},{"size":483,"mtime":1684844075758,"results":"22","hashOfConfig":"16"},{"size":783,"mtime":1684720340913,"results":"23","hashOfConfig":"16"},{"size":3930,"mtime":1684720340913,"results":"24","hashOfConfig":"16"},{"size":396,"mtime":1684761548485,"results":"25","hashOfConfig":"16"},{"size":4696,"mtime":1684843477714,"results":"26","hashOfConfig":"16"},{"size":164,"mtime":1684823927208,"results":"27","hashOfConfig":"16"},{"size":2689,"mtime":1684844300947,"results":"28","hashOfConfig":"16"},{"size":169,"mtime":1684843238024,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1v35svd",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peace/weehodl-tele-webapp/src/index.js",[],["60","61"],"/home/peace/weehodl-tele-webapp/src/App.js",[],"/home/peace/weehodl-tele-webapp/src/components/Wallets.js",["62","63","64"],"import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getBscBalance, getEthBalance, getTokenBalance } from \"../utils/ethers.util\";\nimport { getSolBalance } from \"../utils/solana.util\";\nimport { networks } from \"../utils/network\";\nimport { bscChainId, bscTokens, ethChainId, ethTokens, solTokens } from \"../constants\";\nimport { FaRegCopy } from 'react-icons/fa';\nimport { withdrawQuery } from \"../services/api.service\";\nimport { useTelegram } from \"../hooks/useTelegram\";\n\nconst Wallets = () => {\n  const [walletAddress, setWalletAddress] = useState('');\n  const [userBalance, setUserBalance] = useState(0);\n  const [currentNetwork, setCurrentNetwork] = useState(ethChainId);\n  const [currentToken, setCurrentToken] = useState(ethTokens[0].address);\n  const [tokenList, setTokenList] = useState(ethTokens);\n  const [showAddress, setShowAddress] = useState(false);\n  const [showWithdraw, setShowWithdraw] = useState(false);\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('0');\n\n  const [searchParams] = useSearchParams();\n\n  const { tg, onClose, onToggleButton, queryId, user } = useTelegram();\n\n  // const optimizeAddress = (addr) => {\n  //   return `${addr.substring(0, 5)}..${addr.substring(addr.length - 5)}`\n  // }\n\n\n\n  useEffect(() => {\n    tg.ready();\n    tg.onEvent('mainButtonClicked', withdraw);\n    return () => {\n      tg.offEvent('mainButtonClicked');\n    }\n  }, []);\n\n  const withdraw = async () => {\n      await withdrawQuery({\n        queryId: queryId,\n        amount: amount,\n        chain: currentNetwork,\n        recipient: recipient,\n        user: user.id,\n        token: currentToken\n      });\n  }\n\n  // get coin balance\n  useEffect(() => {\n    async function getUserBalances() {\n      if (currentNetwork === ethChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        setTokenList(ethTokens);\n        setCurrentToken(ethTokens[0].address);\n        setWalletAddress(userAddr);\n      } else if (currentNetwork === bscChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        setWalletAddress(userAddr);\n        setTokenList(bscTokens);\n        setCurrentToken(bscTokens[0].address);\n      } else {\n        const userAddr = searchParams.get('solwallet');\n        setTokenList(solTokens);\n        setCurrentToken(solTokens[0].address);\n        setWalletAddress(userAddr);\n      }\n    }\n    getUserBalances();\n  }, [currentNetwork, searchParams]);\n\n  // getTokenbalance\n  useEffect(() => {\n    async function getTokenBalances() {\n      if (currentNetwork === ethChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        if (!userAddr) return;\n        if (currentToken !== '') {\n          const balance = await getTokenBalance(ethChainId, currentToken, userAddr);\n          setUserBalance(balance);\n        } else {\n          const balance = await getEthBalance(userAddr);\n          setUserBalance(Number(balance).toFixed(4).toString() + ' ETH');\n        }\n      } else if (currentNetwork === bscChainId) {\n        const userAddr = searchParams.get('ethwallet');\n        if (currentToken !== '') {\n          const balance = await getTokenBalance(bscChainId, currentToken, userAddr);\n          setUserBalance(balance);\n        } else {\n          const balance = await getBscBalance(userAddr);\n          setUserBalance(Number(balance).toFixed(4).toString() + ' BNB');\n        }\n      } else {\n        const userAddr = searchParams.get('solwallet');\n        const balance = await getSolBalance(userAddr);\n        setUserBalance(balance.toFixed(4).toString() + ' SOL');\n      }\n    }\n    getTokenBalances();\n  }, [currentToken, currentNetwork, searchParams]);\n\n  const openWithdraw = () => {\n    tg.MainButton.text = 'Withdraw';\n    tg.MainButton.show();\n    setShowWithdraw(true);\n    setShowAddress(false);\n  }\n\n  const openDeposit = () => {\n    setShowAddress(true);\n    setShowWithdraw(false);\n    tg.MainButton.hide();\n  }\n\n\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <label htmlFor=\"network-select\">Network</label>\n          <div id=\"network-select\" className=\"select\">\n            <select value={currentNetwork} onChange={e => setCurrentNetwork(e.target.value)} id=\"standard-select\">\n              <option value={ethChainId}>{networks[ethChainId].chainName}</option>\n              <option value={bscChainId}>{networks[bscChainId].chainName}</option>\n              <option value=\"Solana\">Solana</option>\n            </select>\n            <span className=\"focus\"></span>\n          </div>\n        </div>\n        <div style={{ marginLeft: '0.2em' }}>\n          <label htmlFor=\"token-select\">Token</label>\n          <div id=\"token-select\" className=\"select\">\n            <select value={currentToken} onChange={e => setCurrentToken(e.target.value)} id=\"standard-select\">\n              {\n                tokenList.map((token, i) => (\n                  <option key={i} value={token.address}>{token.name}</option>\n                ))\n              }\n            </select>\n            <span className=\"focus\"></span>\n          </div>\n        </div>\n      </div>\n      <div style={{ marginTop: '2em', marginLeft: '0.5em' }}>\n        {`Balance: ${userBalance} `}\n      </div>\n\n      <div style={{ marginTop: '2em', marginLeft: '0.5em' }}>\n        <div>\n          <button onClick={openDeposit}>Deposit</button>\n          <button onClick={openWithdraw}>Withdraw</button>\n        </div>\n      </div>\n\n      {\n        showAddress && (\n          <div style={{ textAlign: 'center', marginTop: '40px' }}>\n            <div>\n              <span>Your Address</span>\n              <FaRegCopy onClick={() => navigator.clipboard.writeText(walletAddress)} style={{ marginLeft: '10px', cursor: 'pointer' }} />\n            </div>\n            <div style={{ fontSize: '14px' }}>\n              {walletAddress}\n            </div>\n          </div>\n        )\n      }\n      {\n        showWithdraw && (\n          <div>\n            <div>\n              <input value={recipient} onChange={e => setRecipient(e.target.value)} type=\"text\" placeholder=\"Input Recipient Address\" />\n            </div>\n            <div>\n              <input value={amount} onChange={e => setAmount(e.target.value)} type=\"text\" placeholder=\"Input Amount\" />\n            </div>\n          </div>\n        )\n      }\n      <div>{queryId}</div>\n      <div>{user.id}</div>\n      <div>{currentNetwork}</div>\n      <div>{currentToken}</div>\n      <div>{amount}</div>\n      <div>{recipient}</div>\n    </div>\n  )\n}\n\nexport default Wallets;","/home/peace/weehodl-tele-webapp/src/utils/ethers.util.js",["65"],"/home/peace/weehodl-tele-webapp/src/utils/solana.util.js",[],"/home/peace/weehodl-tele-webapp/src/utils/network.js",[],"/home/peace/weehodl-tele-webapp/src/services/api.service.js",[],"/home/peace/weehodl-tele-webapp/src/constants/index.js",[],"/home/peace/weehodl-tele-webapp/src/utils/ERC20ABI.js",[],"/home/peace/weehodl-tele-webapp/src/hooks/useTelegram.js",[],"/home/peace/weehodl-tele-webapp/src/components/ProjectList.js",["66","67","68","69"],"/home/peace/weehodl-tele-webapp/src/constants/contracts.js",[],"/home/peace/weehodl-tele-webapp/src/components/UserLocks.js",["70","71","72","73","74","75"],"/home/peace/weehodl-tele-webapp/src/utils/time.util.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":24,"column":15,"nodeType":"82","messageId":"83","endLine":24,"endColumn":22},{"ruleId":"80","severity":1,"message":"84","line":24,"column":24,"nodeType":"82","messageId":"83","endLine":24,"endColumn":38},{"ruleId":"85","severity":1,"message":"86","line":38,"column":6,"nodeType":"87","endLine":38,"endColumn":8,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":3,"column":34,"nodeType":"82","messageId":"83","endLine":3,"endColumn":43},{"ruleId":"80","severity":1,"message":"90","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":14},{"ruleId":"85","severity":1,"message":"91","line":26,"column":6,"nodeType":"87","endLine":26,"endColumn":8,"suggestions":"92"},{"ruleId":"80","severity":1,"message":"93","line":38,"column":15,"nodeType":"82","messageId":"83","endLine":38,"endColumn":28},{"ruleId":"85","severity":1,"message":"94","line":60,"column":6,"nodeType":"87","endLine":60,"endColumn":22,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"96","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":22},{"ruleId":"80","severity":1,"message":"97","line":4,"column":24,"nodeType":"82","messageId":"83","endLine":4,"endColumn":38},{"ruleId":"80","severity":1,"message":"98","line":12,"column":10,"nodeType":"82","messageId":"83","endLine":12,"endColumn":15},{"ruleId":"80","severity":1,"message":"99","line":12,"column":17,"nodeType":"82","messageId":"83","endLine":12,"endColumn":25},{"ruleId":"85","severity":1,"message":"100","line":26,"column":6,"nodeType":"87","endLine":26,"endColumn":8,"suggestions":"101"},{"ruleId":"85","severity":1,"message":"94","line":41,"column":6,"nodeType":"87","endLine":41,"endColumn":19,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'onClose' is assigned a value but never used.","Identifier","unusedVar","'onToggleButton' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'tg' and 'withdraw'. Either include them or remove the dependency array.","ArrayExpression",["105"],"'secretKey' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'invest', 'searchParams', and 'tg'. Either include them or remove the dependency array.",["106"],"'tokenDecimals' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tg.MainButton'. Either include it or remove the dependency array.",["107"],"'getTokenName' is defined but never used.","'getTokenSymbol' is defined but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'claim', 'searchParams', and 'tg'. Either include them or remove the dependency array.",["108"],["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [tg, withdraw]",{"range":"120","text":"121"},"Update the dependencies array to be: [invest, searchParams, tg]",{"range":"122","text":"123"},"Update the dependencies array to be: [currentProject, tg.MainButton]",{"range":"124","text":"125"},"Update the dependencies array to be: [claim, searchParams, tg]",{"range":"126","text":"127"},"Update the dependencies array to be: [currentLock, tg.MainButton]",{"range":"128","text":"129"},[1468,1470],"[tg, withdraw]",[939,941],"[invest, searchParams, tg]",[2177,2193],"[currentProject, tg.MainButton]",[866,868],"[claim, searchParams, tg]",[1221,1234],"[currentLock, tg.MainButton]"]